<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Westwind.Globalization</name>
    </assembly>
    <members>
        <member name="P:Westwind.Globalization.DbResourceDataManager.Configuration">
            <summary>
            Instance of the DbResourceConfiguration that can be overridden
            Defaults to the default instance - DbResourceConfiguration.Current
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceDataManager.ErrorMessage">
            <summary>
            Error message that can be checked after a method complets
            and returns a failure result.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceDataManager.TableCreationSql">
            <summary>
            Code used to create a database (if required) for the
            given data provider.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceDataManager.Transaction">
            <summary>
            Internally used Transaction object
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.CreateDbResourceDataManager(System.Type)">
            <summary>
            Creates an instance of the DbResourceDataManager based on configuration settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.CreateDbResourceDataManager(Westwind.Globalization.DbResourceProviderTypes)">
            <summary>
            Create an instance of the provider based on the resource type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetDb(System.String)">
            <summary>
            Creates an instance of the DataAccess Data provider
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetResourceSet(System.String,System.String)">
            <summary>
            Returns a specific set of resources for a given culture and 'resource set' which
            in this case is just the virtual directory and culture.
            </summary>
            <param name="cultureName">name of the culture Id (de, de-de) to retrieve</param>
            <param name="resourceSet">Name of the resource set to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetResourceSetNormalizedForLocaleId(System.String,System.String)">
            <summary>
            Returns a fully normalized list of resources that contains the most specific
            locale version for the culture provided.
                            
            This means that this routine walks the resource hierarchy and returns
            the most specific value in this order: de-ch, de, invariant.
            </summary>
            <param name="cultureName"></param>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.LoadFileResource(System.Data.IDataReader)">
            <summary>
            Internal method used to parse the data in the database into a 'real' value.
            
            Value field hold filename and type string
            TextFile,BinFile hold the actual file content
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetAllResources(System.Boolean,System.Boolean,System.String)">
            <summary>
            Returns a list of all the resources for all locales. The result is in a 
            table called TResources that contains all fields of the table. The table is
            ordered by LocaleId.
            
            This version returns either local or global resources in a Web app
            
            Fields:
            ResourceId,Value,LocaleId,ResourceSet,Type
            </summary>
            <param name="localResources">return local resources if true</param>        
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetAllResourceIds(System.String)">
            <summary>
            Returns all available resource ids for a given resource set in all languages.
            
            Returns a ResourceIdItem object with ResourecId and HasValue fields.
            HasValue returns whether there are any entries in any culture for this
            resourceId
            </summary>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetAllResourceIdListItems(System.String)">
            <summary>
            Returns a list with ResourceId and HasValues fields
            where the ResourceId is formatted for HTML display.
            </summary>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetAllResourceSets(Westwind.Globalization.ResourceListingTypes)">
            <summary>
            Returns all available resource sets
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetAllLocaleIds(System.String)">
            <summary>
            Gets all the locales for a specific resource set.
            
            Returns a table named TLocaleIds (LocaleId field)
            </summary>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetAllResourcesForCulture(System.String,System.String)">
            <summary>
            Gets all the Resourecs and ResourceIds for a given resource set and Locale
            
            returns a table "TResource" ResourceId, Value fields
            </summary>
            <param name="resourceSet"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetResourceString(System.String,System.String,System.String)">
            <summary>
            Returns an individual Resource String from the database
            </summary>
            <param name="resourceId"></param>
            <param name="resourceSet"></param>       
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetResourceObject(System.String,System.String,System.String)">
            <summary>
            Returns an object from the Resources. Attempts to convert the object to its
            original type.  Use this for any non-string  types. Useful for binary resources
            like images, icons etc.
            
            While this method can be used with strings, GetResourceString()
            is much more efficient.
            </summary>
            <param name="resourceId"></param>
            <param name="resourceSet"></param>
            <param name="cultureName">required. Null or Empty culture returns invariant</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetResourceItem(System.String,System.String,System.String)">
            <summary>
            Returns a resource item that returns both the Value and Comment to the
            fields to the client.
            </summary>
            <param name="resourceId">The ID of the resource to retrieve</param>
            <param name="resourceSet">Name of the ResourceSet to return</param>
            <param name="cultureName">required. Null or Empty returns invariant</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetResourceItems(System.String,System.String,System.Boolean)">
            <summary>
            Returns all resource items for a given resource ID in all locales.
            Returned as full ResourceItem objects
            </summary>
            <param name="resourceId">The resource Id to return for</param>
            <param name="resourceSet">Resourceset to look in</param>
            <param name="forAllResourceSetLocales">When true returns empty entries for missing resources of locales in this resource set</param>
            <returns>List of resource items or null</returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetResourceStrings(System.String,System.String,System.Boolean)">
            <summary>
            Returns all the resource strings for all cultures for a specific resource Id.
            Returned as a dictionary.
            </summary>
            <param name="resourceId">Resource Id to retrieve strings for</param>
            <param name="resourceSet">Resource Set on which to retrieve strings</param>
            <param name="forAllResourceSetLocales">If true returns empty entries for each locale that exists but has no value in this resource set</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.UpdateOrAddResource(Westwind.Globalization.ResourceItem)">
            <summary>
            Updates a resource if it exists, if it doesn't one is created
            </summary>
            <param name="resource">Resource to update</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.UpdateOrAddResource(System.String,System.Object,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Updates a resource if it exists, if it doesn't one is created
            </summary>
            <param name="resourceId"></param>
            <param name="value"></param>
            <param name="cultureName"></param>
            <param name="resourceSet"></param>
            <param name="Type"></param>        
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.AddResource(Westwind.Globalization.ResourceItem)">
            <summary>
            Adds a resource to the Localization Table
            </summary>
            <param name="resource">Resource to update</param>        
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.AddResource(System.String,System.Object,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Adds a resource to the Localization Table
            </summary>
            <param name="resourceId">The resource key name</param>
            <param name="value">Value to set it to. Can also be a file which is loaded as binary data when valueIsFileName is true</param>
            <param name="cultureName">name of the culture or null for invariant/default</param>
            <param name="resourceSet">The ResourceSet to which the resource id is added</param>
            <param name="comment">Optional comment for the key</param>
            <param name="valueIsFileName">if true the Value property is a filename to import</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.UpdateResource(System.String,System.Object,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Updates an existing resource in the Localization table
            </summary>
            <param name="resourceId"></param>
            <param name="value"></param>
            <param name="cultureName"></param>
            <param name="resourceSet"></param>
            <param name="Type"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.UpdateResource(Westwind.Globalization.ResourceItem)">
            <summary>
            Updates a resource if it exists, if it doesn't one is created
            </summary>
            <param name="resource">Resource to update</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetFileInfo(System.String,System.Boolean)">
            <summary>
            Internal routine that looks at a file and based on its
            extension determines how that file needs to be stored in the
            database. Returns FileInfoFormat structure
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.DeleteResource(System.String,System.String,System.String)">
            <summary>
            Deletes a specific resource ID based on ResourceId, ResourceSet and Culture.
            If an empty culture is passed the entire group is removed (ie. all locales).
            </summary>
            <param name="resourceId">Resource Id to delete</param>
            <param name="resourceSet">The resource set to remove</param>
            <param name="cultureName">language ID - if empty all languages are deleted</param>
            e
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.RenameResource(System.String,System.String,System.String)">
            <summary>
            Renames a given resource in a resource set. Note all languages will be renamed
            </summary>
            <param name="ResourceId"></param>
            <param name="NewResourceId"></param>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.RenameResourceProperty(System.String,System.String,System.String)">
            <summary>
            Renames all property keys for a given property prefix. So this routine updates
            lblName.Text, lblName.ToolTip to lblName2.Text, lblName2.ToolTip if the property
            is changed from lblName to lblName2.
            </summary>
            <param name="Property"></param>
            <param name="NewProperty"></param>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.DeleteResourceSet(System.String,System.String)">
            <summary>
            Deletes an entire resource set from the database. Careful with this function!
            </summary>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.RenameResourceSet(System.String,System.String)">
            <summary>
            Renames a resource set. Useful if you need to move a local page resource set
            to a new page. ResourceSet naming for local resources is application relative page path:
            
            test.aspx
            subdir/test.aspx
            
            Global resources have a simple name
            </summary>
            <param name="OldResourceSet">Name of the existing resource set</param>
            <param name="NewResourceSet">Name to set the resourceset name to</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.ResourceExists(System.String,System.String,System.String)">
            <summary>
            Checks to see if a resource exists in the resource store
            </summary>
            <param name="ResourceId"></param>
            <param name="Value"></param>
            <param name="CultureName"></param>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.IsValidCulture(System.String)">
            <summary>
            Returns true or false depending on whether the two letter country code exists
            </summary>
            <param name="IetfTag">two or four letter IETF tag (examples: de, de-DE,fr,fr-CA)</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GenerateResources(System.Collections.IDictionary,System.String,System.String,System.Boolean)">
            <summary>
            Persists resources to the database - first wipes out all resources, then writes them back in
            from the ResourceSet
            </summary>
            <param name="resourceList"></param>
            <param name="cultureName"></param>
            <param name="resourceSet"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.GetResourcesAsJavascriptObject(System.String,System.String,System.String)">
            <summary>
            Creates an global JavaScript object object that holds all non-control 
            local string resources as property values.
            
            All resources are returned in normalized fashion from most specifc
            to more generic (de-ch,de,invariant depending on availability)
            </summary>
            <param name="javaScriptVarName">Name of the JS object variable to createBackupTable</param>
            <param name="resourceSet">ResourceSet name. Pass NULL for locale Resources</param>
            <param name="localeId"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.IsLocalizationTable(System.String)">
            <summary>
            Checks to see if the LocalizationTable exists
            </summary>
            <param name="tableName">Table name or the configuration.ResourceTableName if not passed</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.CreateBackupTable(System.String)">
            <summary>
            Create a backup of the localization database.
            
            Note the table used is the one specified in the Configuration.ResourceTableName
            </summary>
            <param name="BackupTableName">Table of the backup table. Null creates a _Backup table.</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.RestoreBackupTable(System.String)">
            <summary>
            Restores the localization table from a backup table by first wiping out 
            </summary>
            <param name="backupTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.CreateLocalizationTable(System.String)">
            <summary>
            Creates the Localization table on the current connection string for
            the provider.
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.SerializeValue(System.Object)">
            <summary>
            Serializes a value to string that can be stored in
            data storage.
            Used for serializing arbitrary objects to store in the application
            </summary>
            <param name="value"></param>
            <returns>JSON string or null (no exceptions thrown on error)</returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceDataManager.DeserializeValue(System.String,System.String)">
            <summary>
            Deserializes serialized data in JSON format based on a
            type name provided in the resource type parameter.        
            </summary>
            <param name="serializedValue">JSON encoded string</param>
            <param name="resourceType">Type name to deserialize - type must be referenced by the app</param>
            <returns>value or null on failure (no exceptions thrown)</returns>
        </member>
        <member name="T:Westwind.Globalization.DbResourceDataManagerTypes">
            <summary>
            The data managers supported by this library
            </summary>
        </member>
        <member name="T:Westwind.Globalization.ResourceIdItem">
            <summary>
            Short form ResourceItem for passing Ids
            </summary>
        </member>
        <member name="T:Westwind.Globalization.ResourceListingTypes">
            <summary>
            Determines how hte GetAllResourceSets method returns its data
            </summary>
        </member>
        <member name="T:Westwind.Globalization.FileInfoFormat">
            <summary>
            Internal structure that contains format information about a file
            resource. Used internally to figure out how to write 
            a resource into the database
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbResourceMySqlDataManager">
            <summary>
            MySql implementation of the Db SQL data resource provider.
            </summary>
            <remarks>
            IMPORTANT: In order to use this provider make sure you add
            the MySql.Data NuGet Package to your project.
            </remarks>
        </member>
        <member name="M:Westwind.Globalization.DbResourceMySqlDataManager.GetAllResourceIds(System.String)">
            <summary>
            Returns all available resource ids for a given resource set in all languages.
            
            Returns a ResourceIdItem object with ResourecId and HasValue fields.
            HasValue returns whether there are any entries in any culture for this
            resourceId
            </summary>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceMySqlDataManager.CreateBackupTable(System.String)">
            <summary>
            Create a backup of the localization database.
            
            Note the table used is the one specified in the Configuration.ResourceTableName
            </summary>
            <param name="BackupTableName">Table of the backup table. Null creates a _Backup table.</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceMySqlDataManager.IsLocalizationTable(System.String)">
            <summary>
            Checks to see if the LocalizationTable exists
            </summary>
            <param name="tableName">Table name or the configuration.ResourceTableName if not passed</param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Globalization.DbResourceSqLiteDataManager">
            <summary>
            Sql CE implementation of the Db SQL data provider
            </summary>
            <remarks>
            IMPORTANT: Make sure you add the System.Data.SQLite.Core
            NuGet Package to your project in order to have access 
            SqlLite
            </remarks>
        </member>
        <member name="M:Westwind.Globalization.DbResourceSqLiteDataManager.GetAllResourceIds(System.String)">
            <summary>
            Returns all available resource ids for a given resource set in all languages.
            
            Returns a ResourceIdItem object with ResourecId and HasValue fields.
            HasValue returns whether there are any entries in any culture for this
            resourceId
            </summary>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Globalization.DbResourceSqlServerCeDataManager">
            <summary>
            Sql CE implementation of the Db SQL data provider
            </summary>
        </member>
        <member name="P:Westwind.Globalization.IDbResourceDataManager.Configuration">
            <summary>
            Instance of the DbResourceConfiguration that can be overridden
            Defaults to the default instance - DbResourceConfiguration.Current
            </summary>
        </member>
        <member name="P:Westwind.Globalization.IDbResourceDataManager.ErrorMessage">
            <summary>
            Error message that can be checked after a method complets
            and returns a failure result.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GetDb(System.String)">
            <summary>
            Creates an instance of the DataAccess Data provider
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GetResourceSet(System.String,System.String)">
            <summary>
            Returns a specific set of resources for a given culture and 'resource set' which
            in this case is just the virtual directory and culture.
            </summary>
            <param name="cultureName">name of the culture Id (de, de-de) to retrieve</param>
            <param name="resourceSet">Name of the resource set to retrieve</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GetResourceSetNormalizedForLocaleId(System.String,System.String)">
            <summary>
            Returns a fully normalized list of resources that contains the most specific
            locale version for the culture provided.
                            
            This means that this routine walks the resource hierarchy and returns
            the most specific value in this order: de-ch, de, invariant.
            </summary>
            <param name="cultureName"></param>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GetAllResources(System.Boolean,System.Boolean,System.String)">
            <summary>
            Returns a data table of all the resources for all locales. The result is in a 
            table called TResources that contains all fields of the table. The table is
            ordered by LocaleId.
            
            This version returns either local or global resources in a Web app
            
            Fields:
            ResourceId,Value,LocaleId,ResourceSet,Type
            </summary>
            <param name="localResources">return local resources if true</param>        
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GetAllResourceIds(System.String)">
            <summary>
            Returns all available resource ids for a given resource set in all languages.
            
            Returns a ResourceIdItem object with ResourecId and HasValue fields.
            HasValue returns whether there are any entries in any culture for this
            resourceId
            </summary>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GetAllResourceIdListItems(System.String)">
            <summary>
            Returns an DataTable called TResourceIds with ResourceId and HasValues fields
            where the ResourceId is formatted for HTML display.
            </summary>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GetAllResourceSets(Westwind.Globalization.ResourceListingTypes)">
            <summary>
            Returns all available resource sets
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GetAllLocaleIds(System.String)">
            <summary>
            Gets all the locales for a specific resource set.
            
            Returns a table named TLocaleIds (LocaleId field)
            </summary>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GetAllResourcesForCulture(System.String,System.String)">
            <summary>
            Gets all the Resourecs and ResourceIds for a given resource set and Locale
            
            returns a table "TResource" ResourceId, Value fields
            </summary>
            <param name="resourceSet"></param>
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GetResourceString(System.String,System.String,System.String)">
            <summary>
            Returns an individual Resource String from the database
            </summary>
            <param name="resourceId"></param>
            <param name="resourceSet"></param>       
            <param name="cultureName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GetResourceObject(System.String,System.String,System.String)">
            <summary>
            Returns an object from the Resources. Attempts to convert the object to its
            original type.  Use this for any non-string  types. Useful for binary resources
            like images, icons etc.
            
            While this method can be used with strings, GetResourceString()
            is much more efficient.
            </summary>
            <param name="resourceId"></param>
            <param name="resourceSet"></param>
            <param name="cultureName">required. Null or Empty culture returns invariant</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GetResourceItem(System.String,System.String,System.String)">
            <summary>
            Returns a resource item that returns both the Value and Comment to the
            fields to the client.
            </summary>
            <param name="resourceId">The ID of the resource to retrieve</param>
            <param name="resourceSet">Name of the ResourceSet to return</param>
            <param name="cultureName">required. Null or Empty returns invariant</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GetResourceItems(System.String,System.String,System.Boolean)">
            <summary>
            Returns all resource items for a given resource ID in all locales.
            Returned as full ResourceItem objects
            </summary>
            <param name="resourceId">The resource Id to return for</param>
            <param name="resourceSet">Resourceset to look in</param>
            <param name="forAllResourceSetLocales">When true returns empty entries for missing resources of locales in this resource set</param>
            <returns>List of resource items or null</returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GetResourceStrings(System.String,System.String,System.Boolean)">
            <summary>
            Returns all the resource strings for all cultures for a specific resource Id.
            Returned as a dictionary.
            </summary>
            <param name="resourceId">Resource Id to retrieve strings for</param>
            <param name="resourceSet">Resource Set on which to retrieve strings</param>
            <param name="forAllResourceSetLocales">If true returns empty entries for each locale that exists but has no value in this resource set</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.UpdateOrAddResource(Westwind.Globalization.ResourceItem)">
            <summary>
            Updates a resource if it exists, if it doesn't one is created
            </summary>
            <param name="resource">Resource to update</param>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.UpdateOrAddResource(System.String,System.Object,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Updates a resource if it exists, if it doesn't one is created
            </summary>
            <param name="resourceId"></param>
            <param name="value"></param>
            <param name="cultureName"></param>
            <param name="resourceSet"></param>
            <param name="Type"></param>        
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.AddResource(Westwind.Globalization.ResourceItem)">
            <summary>
            Adds a resource to the Localization Table
            </summary>
            <param name="resource">Resource to update</param>        
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.AddResource(System.String,System.Object,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Adds a resource to the Localization Table
            </summary>
            <param name="resourceId">The resource key name</param>
            <param name="value">Value to set it to. Can also be a file which is loaded as binary data when valueIsFileName is true</param>
            <param name="cultureName">name of the culture or null for invariant/default</param>
            <param name="resourceSet">The ResourceSet to which the resource id is added</param>
            <param name="comment">Optional comment for the key</param>
            <param name="valueIsFileName">if true the Value property is a filename to import</param>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.UpdateResource(System.String,System.Object,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Updates an existing resource in the Localization table
            </summary>
            <param name="resourceId"></param>
            <param name="value"></param>
            <param name="cultureName"></param>
            <param name="resourceSet"></param>
            <param name="Type"></param>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.UpdateResource(Westwind.Globalization.ResourceItem)">
            <summary>
            Updates a resource if it exists, if it doesn't one is created
            </summary>
            <param name="resource">Resource to update</param>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.DeleteResource(System.String,System.String,System.String)">
            <summary>
            Deletes a specific resource ID based on ResourceId, ResourceSet and Culture.
            If an empty culture is passed the entire group is removed (ie. all locales).
            </summary>
            <param name="resourceId">Resource Id to delete</param>
            <param name="resourceSet">The resource set to remove</param>
            <param name="cultureName">language ID - if empty all languages are deleted</param>
            e
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.RenameResource(System.String,System.String,System.String)">
            <summary>
            Renames a given resource in a resource set. Note all languages will be renamed
            </summary>
            <param name="ResourceId"></param>
            <param name="NewResourceId"></param>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.RenameResourceProperty(System.String,System.String,System.String)">
            <summary>
            Renames all property keys for a given property prefix. So this routine updates
            lblName.Text, lblName.ToolTip to lblName2.Text, lblName2.ToolTip if the property
            is changed from lblName to lblName2.
            </summary>
            <param name="Property"></param>
            <param name="NewProperty"></param>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.DeleteResourceSet(System.String,System.String)">
            <summary>
            Deletes an entire resource set from the database. Careful with this function!
            </summary>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.RenameResourceSet(System.String,System.String)">
            <summary>
            Renames a resource set. Useful if you need to move a local page resource set
            to a new page. ResourceSet naming for local resources is application relative page path:
            
            test.aspx
            subdir/test.aspx
            
            Global resources have a simple name
            </summary>
            <param name="OldResourceSet">Name of the existing resource set</param>
            <param name="NewResourceSet">Name to set the resourceset name to</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.ResourceExists(System.String,System.String,System.String)">
            <summary>
            Checks to see if a resource exists in the resource store
            </summary>
            <param name="ResourceId"></param>
            <param name="Value"></param>
            <param name="CultureName"></param>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.IsValidCulture(System.String)">
            <summary>
            Returns true or false depending on whether the two letter country code exists
            </summary>
            <param name="IetfTag">two or four letter IETF tag (examples: de, de-DE,fr,fr-CA)</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GenerateResources(System.Collections.IDictionary,System.String,System.String,System.Boolean)">
            <summary>
            Persists resources to the database - first wipes out all resources, then writes them back in
            from the ResourceSet
            </summary>
            <param name="resourceList"></param>
            <param name="cultureName"></param>
            <param name="resourceSet"></param>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.GetResourcesAsJavascriptObject(System.String,System.String,System.String)">
            <summary>
            Creates an global JavaScript object object that holds all non-control 
            local string resources as property values.
            
            All resources are returned in normalized fashion from most specifc
            to more generic (de-ch,de,invariant depending on availability)
            </summary>
            <param name="javaScriptVarName">Name of the JS object variable to createBackupTable</param>
            <param name="resourceSet">ResourceSet name. Pass NULL for locale Resources</param>
            <param name="localeId"></param>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.IsLocalizationTable(System.String)">
            <summary>
            Checks to see if the LocalizationTable exists
            </summary>
            <param name="tableName">Table name or the configuration.ResourceTableName if not passed</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.CreateBackupTable(System.String)">
            <summary>
            Create a backup of the localization database.
            
            Note the table used is the one specified in the Configuration.ResourceTableName
            </summary>
            <param name="BackupTableName">Table of the backup table. Null creates a _Backup table.</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.RestoreBackupTable(System.String)">
            <summary>
            Restores the localization table from a backup table by first wiping out 
            </summary>
            <param name="backupTableName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceDataManager.CreateLocalizationTable(System.String)">
            <summary>
            Creates the Localization table on the current connection string for
            the provider.
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Globalization.IDbResourceSetDataManager">
            <summary>
            This interface is all that's required to use the Db resource provider
            or resource manager operation. It's a subset of the IDbResourceDataManager
            minimized just for ResourceSet operation.
            
            All DataManagers implement this interface.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.IDbResourceSetDataManager.GetResourceSet(System.String,System.String)">
            <summary>
            Returns a specific set of resources for a given culture and 'resource set' which
            in this case is just the virtual directory and culture.
            </summary>
            <param name="cultureName"></param>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="P:Westwind.Globalization.MarkdownResourceSetValueConverter.ValueType">
            <summary>
            The value type that you would like to act on.
            This value can be the standard value type defined
            in the ValueTypes enumeration or any other integer
            value that is stored in the ValueType property of
            database.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.MarkdownResourceSetValueConverter.Convert(System.Object,System.String)">
            <summary>
            The method used to convert or transform the value
            that will be stored in the ResourceSet fed for resources.
            </summary>
            <param name="resourceValue">The actual value to convert</param>
            <param name="key">key of the value to convert</param>        
            <returns></returns>
        </member>
        <member name="P:Westwind.Globalization.IResourceSetValueConverter.ValueType">
            <summary>
            The value type that you would like to act on.
            This value can be the standard value type defined
            in the ValueTypes enumeration or any other integer
            value that is stored in the ValueType property of
            database.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.IResourceSetValueConverter.Convert(System.Object,System.String)">
            <summary>
            The method used to convert or transform the value
            that will be stored in the ResourceSet fed for resources.
            </summary>
            <param name="resourceValue">The actual value to convert</param>
            <param name="key">key of the value to convert</param>        
            <returns></returns>
        </member>
        <member name="T:Westwind.Globalization.DbResourceReader">
            <summary>
            DbResourceReader is an IResourceReader for reading resources from a database.
            The ResourceReader is the actual Resource component that accesses the underlying datasource
            to retrieve the resource data. 
            
            This databased manager uses the DbResourceDataManager to query the database and retrieve
            a list of resources for a given baseName (ResourceSet) and Culture and returns that result
            as an IEnumerable list (via a HashTable). This process - other than the data access - results
            in the same structures as resources read from ResX files.
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceReader.baseNameField">
            <summary>
            Name of the ResourceSet
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceReader.cultureInfo">
            <summary>
            The culture that applies to to this reader
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceReader.Items">
            <summary>
            Cached instance of items. The ResourceManager will often be called repeatedly
            for the same data so this caching avoids multiple repetitive calls to the
            database.
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceReader._SyncLock">
            <summary>
            Critcal section for loading resource items
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceReader.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Core constructor for DbResourceReader. This ctor is passed the name of the
            ResourceSet and a culture that is to be loaded.
            </summary>
            <param name="baseNameField">The base name of the resource reader</param>
            <param name="cultureInfo">The CultureInfo identifying the culture of the resources to be read</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceReader.GetEnumerator">
            <summary>
            This is the worker method responsible for actually retrieving resources from the resource
            store. This method goes out queries the database by asking for a specific ResourceSet and 
            Culture and it returns a Hashtable (as IEnumerable) to use as a ResourceSet.
            
            The ResourceSet manages access to resources via IEnumerable access which is ultimately used
            to return resources to the front end.
            
            Resources are read once and cached into an internal Items field. A ResourceReader instance
            is specific to a ResourceSet and Culture combination so there should never be a need to
            reload this data, except when explicitly clearing the reader/resourceset (in which case
            Items can be set to null via ClearResources()).
            </summary>
            <returns>An IDictionaryEnumerator of the resources for this reader</returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an IEnumerator of the resources for this reader. Simply returns 
            the IDictionary enumerator from the overload.
            </summary>
            <returns>An IEnumerator of the resources for this reader</returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceReader.Close">
            <summary>
            Closes the resource reader after releasing any resources associated with it
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceReader.Dispose">
            <summary>
            Releases all resources used by the object. Ultimately this is called
            by ResourceManager.ReleaseAllResources which calls on the ResourceSet
            and then down into the reader to close its resources. 
            
            This code cleans up the internally created dictionary which in turn
            comes from a Hashtable.
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbResourceSet">
            <summary>
            DbResourceSet is the ResourceSet implementation for the database driven
            Resource manager. A ResourceSet is a IEnumerable list of all resources
            in set for a given specific culture. Each culture has a separate resource
            set. The ResourceManager caches the InternalResourceSets and figures out how to
            return the resources from this ResourceSet using the IEnumerable interface.
            
            The ResourceSet doesn't do any work - it serves merely as a coordinator. The
            actual reading of resources is managed by the ResourceReader which eventually
            calls into the database to retrieve the resources for the ResourceSet.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceSet.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Core constructore. Gets passed a baseName (which is the ResourceSet Id - 
            either a local or global resource group) and a culture. 
            
            This constructor basically creates a new ResourceReader and uses that
            reader's IEnumerable interface to provide access to the underlying
            resource data.
            </summary>
            <param name="baseName"></param>
            <param name="culture"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceSet.GetDefaultReader">
            <summary>
            Marker method that provides the type used for the ResourceReader.
            Not used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceSet.GetDefaultWriter">
            <summary>
            Marker method that provides the type used for a ResourceWriter.
            Not used.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Westwind.Globalization.DbResourceWriter">
            <summary>
            DbResourceWriter is an IResourceWriter for writing resources to a database
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceWriter.resourceList">
            <summary>
            List of resources we want to add
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            Constructs a DbResourceWriter object
            </summary>
            <param name="baseNameField">The base name of the resource writer</param>
            <param name="cultureInfo">The CultureInfo identifying the culture of the resources to be written</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.#ctor(System.Resources.IResourceReader,System.String,System.Globalization.CultureInfo)">
            <summary>
            Override that reads existing resources into the list
            </summary>
            <param name="reader"></param>
            <param name="baseName"></param>
            <param name="cultureInfo"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.Close">
            <summary>
            Closes the resource writer after releasing any resources associated with it
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.Dispose">
            <summary>
            Releases all resources used by the object
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the object
            </summary>
            <param name="disposing">True if the object is being disposed</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.AddResource(System.String,System.Object)">
            <summary>
            Adds a resource to the list of resources to be written to an output file or output stream
            </summary>
            <param name="name">The name of the resource</param>
            <param name="value">The value of the resource</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.AddResource(System.String,System.String)">
            <summary>
            Adds a resource to the list of resources to be written to an output file or output stream
            </summary>
            <param name="name">The name of the resource</param>
            <param name="value">The value of the resource</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.AddResource(System.String,System.Byte[])">
            <summary>
            Adds a resource to the list of resources to be written to an output file or output stream
            </summary>
            <param name="name">The name of the resource</param>
            <param name="value">The value of the resource</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.Generate">
            <summary>
            Writes all the resources added by the AddResource method to the output file or stream
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceWriter.Generate(System.Boolean)">
            <summary>
            Writes all resources out to the resource store. Optional flag that
            allows deleting all resources for a given culture and basename first
            so that you get 'clean set' of resource with no orphaned values.
            </summary>
            <param name="DeleteAllRowsFirst"></param>
        </member>
        <member name="T:Westwind.Globalization.DbResourceSqlServerDataManager">
            <summary>
            This class provides the Data Access to the database
            for the DbResourceManager, Provider and design time
            services. This class acts as a Business layer
            and uses the SqlDataAccess DAL for its data access.
            
            Dependencies:
            DbResourceConfiguration   (holds and reads all config data from .Current)
            SqlDataAccess             (provides a data access (DAL))
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbRes">
            <summary>
            Helper class that handles access to the DbResourceManager
            more easily with single method access. The T() method provides
            an easy way to embed resources into applications using the
            resource key.
            
            Also allows for resource reading, writing (new and updates transparently), 
            deleting and clearing of resources from memory.
            
            This class uses the DbResourceManager class to access
            resources and still uses the standard ResourceManager 
            infrastructure of .NET to cache resources efficiently
            in memory. Data access occurs only on intial access of
            each resource set/locale.
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbRes.ResourceManagers">
            <summary>
            Internal dictionary that holds instances of resource managers
            for each resourceset defined in the application. Lazy loaded
            as resources are accessed.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbRes.AutoAddResources">
            <summary>
            Determines whether resources that fail in a lookup are automatically
            added to the resource table
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbRes.T(System.String,System.String,System.String)">
            <summary>
            Localization helper function that Translates a resource
            Id to a resource value string. Easy access that allows full
            control over the resource to retrieve or default UiCulture
            locale retrieval.
            </summary>
            <param name="resId">The Resource Id to retrieve
            Note resource Ids can be *any* string and if no
            matching resource is found the id is returned.
            </param>
            <param name="resourceSet">Name of the ResourceSet that houses this resource. If null or empty resources are used.</param>
            <param name="lang">5 letter or 2 letter language ieetf code: en-US, de-DE or en, de etc.</param>
            <returns>
            Localized resource or the resource Id if no match is found. 
            This value *always* returns a string unless you pass in null.
            </returns>
        </member>
        <member name="M:Westwind.Globalization.DbRes.TDefault(System.String,System.String,System.String,System.String)">
            <summary>
            Localization helper function that Translates a resource
            Id to a resource value string. If id is not found default text is returned. Easy access that allows full
            control over the resource to retrieve or default UiCulture
            locale retrieval.
            </summary>
            <param name="resId">The Resource Id to retrieve</param>
            <param name="defaultText">Default text that is returned when resource with given resId is not found</param>
            <param name="resourceSet">Name of the ResourceSet that houses this resource. If null or empty resources are used.</param>
            <param name="lang">5 letter or 2 letter language ieetf code: en-US, de-DE or en, de etc.</param>
            <returns>
            Localized resource or the resource Id if no match is found. 
            This value *always* returns a string unless you pass in null in defaultText.
            </returns>
            
        </member>
        <member name="M:Westwind.Globalization.DbRes.THtml(System.String,System.String,System.String)">
            <summary>
            Localization helper function that Translates a resource
            Id to a resource value to an HtmlStringg. Easy access that allows full
            control over the resource to retrieve or default UiCulture
            locale retrieval.
            
            Use this version for HTML content that needs to be embedded in Razor
            views or other server tools that can use pre-encoded HTML content.
            </summary>
            <param name="resId">The Resource Id to retrieve
            Note resource Ids can be *any* string and if no
            matching resource is found the id is returned.
            </param>
            <param name="resourceSet">Name of the ResourceSet that houses this resource. If null or empty resources are used.</param>
            <param name="lang">5 letter or 2 letter language ieetf code: en-US, de-DE or en, de etc.</param>
            <returns>
            Localized resource or the resource Id if no match is found. 
            This value *always* returns a string unless you pass in null.
            </returns>
        </member>
        <member name="M:Westwind.Globalization.DbRes.TFormat(System.String,System.String,System.String,System.Object[])">
            <summary>
            Creates a localized format string that is transformed using the 
            specified resource id.
            </summary>
            <param name="format">Format string that is to be localized</param>
            <param name="resId">Resource id to localize from</param>
            <param name="resourceSet">Resource set to localize from</param>        
            <param name="args">Any arguments for the format string</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbRes.TFormat(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            Creates a localized format string that is transformed using the 
            specified resource id.
            </summary>
            <param name="format">Format string that is to be localized</param>
            <param name="resId">Resource id to localize from</param>
            <param name="resourceSet">Resource set to localize from</param>
            <param name="lang">Language code</param>
            <param name="args">Any arguments for the format string</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbRes.TObject(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Localization helper function that Translates a resource
            Id to a resource value object. Use this function if you're
            retrieving non-string values - for string values just use T.
            </summary>
            <param name="resId">The Resource Id to retrieve
            Note resource Ids can be *any* string and if no
            matching resource is found the id is returned.
            </param>
            <param name="resourceSet">Name of the ResourceSet that houses this resource. If null or empty resources are used.</param>
            <param name="lang">5 letter or 2 letter language ieetf code: en-US, de-DE or en, de etc.</param>
            <param name="autoAdd">If true if a resource cannot be found a new entry is added in the invariant locale</param>
            <returns>
            The resource as an object.    
            </returns>
        </member>
        <member name="M:Westwind.Globalization.DbRes.WriteResource(System.String,System.String,System.String,System.String)">
            <summary>
            Writes a resource either creating or updating an existing resource 
            </summary>
            <param name="resourceId">Resource Id to write. Resource Ids can be any string up to 1024 bytes in length</param>
            <param name="value">Value to set the resource to</param>
            <param name="lang">Language as ieetf code: en-US, de-DE etc. 
            Value can be left blank for Invariant/Default culture to set.
            </param>
            <param name="resourceSet">The resourceSet to store the resource on. 
            If no resource set name is provided a default empty resource set is used.</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Westwind.Globalization.DbRes.DeleteResource(System.String,System.String,System.String)">
            <summary>
            Deletes a resource entry
            </summary>
            <param name="resourceId">The resource to delete</param>
            <param name="lang">The language Id - Be careful:  If empty or null deletes matching keys for all languages</param>
            <param name="resourceSet">The resource set to apply</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Westwind.Globalization.DbRes.GetResourceManager(System.String)">
            <summary>
            Returns an instance of a DbResourceManager
            </summary>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbRes.GetResourceSet(System.String,System.String)">
            <summary>
            Returns a resource set for a given resource
            </summary>
            <param name="resourceSet">The name of the resource set to return.</param>
            <param name="lang">The language code (en-US,de-DE). Pass null to use the current ui culture</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbRes.ClearResources">
            <summary>
            Clears resources from memory and forces reloading of all ResourceSets.
            Effectively unloads the ResourceManager and ResourceProvider.
            </summary>
        </member>
        <member name="T:Westwind.Globalization.ResourceItem">
            <summary>
            Returns a resource item that contains both Value and Comment
            </summary>
        </member>
        <member name="P:Westwind.Globalization.ResourceItem.ResourceId">
            <summary>
            The Id of the resource
            </summary>
        </member>
        <member name="P:Westwind.Globalization.ResourceItem.Value">
            <summary>
            The value of this resource
            </summary>
        </member>
        <member name="P:Westwind.Globalization.ResourceItem.Comment">
            <summary>
            The optional comment for this resource
            </summary>
        </member>
        <member name="P:Westwind.Globalization.ResourceItem.Type">
            <summary>
            Type of the data if not a string
            </summary>
        </member>
        <member name="P:Westwind.Globalization.ResourceItem.LocaleId">
            <summary>
            The localeId ("" invariant or "en-US", "de" etc). Note
            Empty means invariant or default locale.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.ResourceItem.ValueType">
            <summary>
            Determines what type of value the Value field represents
            Mainly used to differentiate between text and Markdown text
            </summary> 
        </member>
        <member name="P:Westwind.Globalization.ResourceItem.ResourceSet">
            <summary>
            The resource set (file) that this resource belongs to
            </summary>
        </member>
        <member name="M:Westwind.Globalization.ResourceItem.FromDataReader(System.Data.IDataReader)">
            <summary>
            initializes the resource item properties from
            the active data reader item.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:Westwind.Globalization.IWestWindResourceProvider">
            <summary>
            Resource Provider marker interface. Also provides for clearing resources.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.IWestWindResourceProvider.ClearResourceCache">
            <summary>
            Interface method used to force providers to register themselves
            with DbResourceConfiguration.
            </summary>
        </member>
        <member name="T:Westwind.Globalization.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.Can_t_save_resource__Invalid_culture_id_passed">
            <summary>
              Looks up a localized string similar to Can&apos;t save resource: Invalid culture id passed: {0}.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.Client_Id_and_Client_Secret_must_be_provided">
            <summary>
              Looks up a localized string similar to Client Id and Client Secret must be provided..
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.Client_Id_and_Client_Secret_must_be_provided_">
            <summary>
              Looks up a localized string similar to Client Id and Client Secret must be provided..
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.ConnectionFailed">
            <summary>
              Looks up a localized string similar to Connection failed: .
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.ConnectionStringForResourcesIsNotConfigure">
            <summary>
              Looks up a localized string similar to Connection string for resources is not configured.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.EditPageResources">
            <summary>
              Looks up a localized string similar to Edit Page Resources.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.InvalidFileExtensionForFileResource">
            <summary>
              Looks up a localized string similar to Invalid file extension for file resource..
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.InvalidSearchResult">
            <summary>
              Looks up a localized string similar to Invalid search result..
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.LocalizationOptions">
            <summary>
              Looks up a localized string similar to Localization Options.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.LocalizationTable_Localization_Table_exists_already">
            <summary>
              Looks up a localized string similar to Localization Table exists already.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.No_matching_Recordset_found">
            <summary>
              Looks up a localized string similar to No matching Recordset found..
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.NoResourceIdSpecifiedCantAddResource">
            <summary>
              Looks up a localized string similar to No ResourceId specified. Can&apos;t add resource.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.ResourceItemMissingFileUploadData">
            <summary>
              Looks up a localized string similar to Missing file upload data.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.Properties.Resources.ShowLocalizationIcons">
            <summary>
              Looks up a localized string similar to Show Localization Icons.
            </summary>
        </member>
        <member name="T:Westwind.Globalization.GeneratedResourceHelper">
            <summary>
            Class that returns resources 
            </summary>
        </member>
        <member name="M:Westwind.Globalization.GeneratedResourceHelper.GetResourceString(System.String,System.String,System.Resources.ResourceManager,Westwind.Globalization.ResourceAccessMode)">
            <summary>
            Helper function called from strongly typed resources to retrieve 
            string based resource values.
            
            This method returns a resource string based on the active 
            Generated ResourceAccessMode.
            </summary>
            <param name="resourceSet"></param>
            <param name="resourceId"></param>
            <param name="manager"></param>
            <param name="resourceMode"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.GeneratedResourceHelper.GetResourceObject(System.String,System.String,System.Resources.ResourceManager,Westwind.Globalization.ResourceAccessMode)">
            <summary>
            Helper function called from strongly typed resources to retrieve 
            non-string based resource values.
            
            This method returns a resource value based on the active 
            Generated ResourceAccessMode.
            </summary>
            <param name="resourceSet"></param>
            <param name="resourceId"></param>
            <param name="manager"></param>
            <param name="resourceMode"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.GeneratedResourceHelper.GetAspNetResourceProviderValue(System.String,System.String)">
            <summary>
            Helper method called to retrieve ASP.NET ResourceProvider based
            resources. Isolated into a separate method to avoid referencing
            HttpContext from the StronglyTyped resource file so non-Web
            projects don't pull in System.Web.
            </summary>
            <param name="resourceSet"></param>
            <param name="resourceId"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.GeneratedResourceHelper.BitmapToEmbeddedHtmlImage(System.Drawing.Bitmap,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
            Renders an HTML IMG tag that contains the bitmaps embedded image content
            inline of the HTML document. Userful for resources.
            </summary>
            <param name="bitmap"></param>
            <param name="format"></param>
            <param name="extraAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.GeneratedResourceHelper.BitmapToEmbeddedHtmlImage(System.Byte[],System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
            Renders an HTML IMG tag that contains a raw byte stream's image content
            inline of the HTML document. Userful for resources.
            </summary>
            <param name="data"></param>
            <param name="format"></param>
            <param name="extraAttributes"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Globalization.JavaScriptResources">
            <summary>
            Class that handles generating strongly typed resources 
            for global Web resource files. This feature is not supported
            in ASP.NET stock projects and doesn't support custom resource
            providers in WAP.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.JavaScriptResources.OutputPath">
            <summary>
            The physical path for the Web application
            </summary>
        </member>
        <member name="P:Westwind.Globalization.JavaScriptResources.ErrorMessage">
            <summary>
            An error message set on a failure result
            </summary>
        </member>
        <member name="M:Westwind.Globalization.JavaScriptResources.SerializeResourceDictionary(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            Generates the actual JavaScript object map string makes up the
            handler's result content.
            </summary>
            <param name="resxDict"></param>
            <param name="resourceSetName"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Globalization.StronglyTypedResources">
            <summary>
            Class that handles generating strongly typed resources 
            for global Web resource files. This feature is not supported
            in ASP.NET stock projects and doesn't support custom resource
            providers in WAP.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.StronglyTypedResources.WebPhysicalPath">
            <summary>
            The physical path for the Web application
            </summary>
        </member>
        <member name="P:Westwind.Globalization.StronglyTypedResources.ErrorMessage">
            <summary>
            An error message set on a failure result
            </summary>
        </member>
        <member name="F:Westwind.Globalization.StronglyTypedResources.IsVb">
            <summary>
            Internally track File type once we've read it from the
            top level method.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedResources.CreateClassFromFromAllGlobalResXResources(System.String,System.String)">
            <summary>
            Creates a class containing strongly typed resources of all resource keys
            in all global resource ResX files. A single class file with multiple classes
            is created.
            
            The extension of the output file determines whether VB or CS is generated       
            </summary>        
            <param name="Namespace"></param>
            <param name="FileName">Output file name for the generated class. .cs and .vb generate appropriate languages</param>
            <returns>Generated class as a string</returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedResources.CreateGlobalResxResourceDesignerFiles(System.String,Westwind.Globalization.CodeGenerationLanguage)">
            <summary>
            Creates a strongly typed resource class that uses the ASP.NET Resource Manager
            rather than using Resx .NET resources which basically results in duplicated 
            resource sets loaded. Overwrites the generated.
            </summary>
            <param name="Namespace"></param>        
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedResources.CreateClassFromAllDatabaseResources(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates strongly typed classes from all global resources in the current application
            from the active DbResourceManager. One class is created which contains each of the
            resource classes. Classnames are not necessarily named with
            
            Uses the default DbResourceConfiguration.Current settings for connecting
            to the database.
            </summary>
            <param name="Namespace">Optional namespace for the generated file</param>
            <param name="FileName">Output class file. .cs or .vb determines code language</param>
            <returns>Generated class as a string</returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedResources.CreateResxDesignerClassesFromAllDatabaseResources(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates strongly typed classes from all global resources in the current application
            from the active DbResourceManager. One class is created which contains each of the
            resource classes. Classnames are not necessarily named with
            
            Uses the default DbResourceConfiguration.Current settings for connecting
            to the database.
            </summary>
            <param name="ns">Optional namespace for the generated file</param>
            <param name="fileName">Output class file. .cs or .vb determines code language</param>
            <returns>Generated class as a string</returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedResources.CreateClassFromResXResource(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an ASP.NET compatible strongly typed resource from a ResX file in ASP.NET.
            The class generated works only for Global Resources by calling GetGlobalResourceObject.
            
            This routine parses the raw ResX files since you can't easily get access to the active
            ResourceManager in an ASP.NET application since the assembly is dynamically named and not
            easily accessible.
            </summary>
            <param name="ResourceSetFileName"></param>
            <param name="Namespace"></param>
            <param name="FileName">Output filename for the CSharp class. If null no file is generated and only the class is returned</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedResources.CreateClassFromDatabaseResource(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a strongly typed resource class for a ResoureSet from the DbResourceManager.
            
            Note: Uses the default ResourceProvider settings as set in the DbResourceConfiguration.Current 
            property for opening the database and otherwise setting values.
            </summary>
            <param name="ResourceSetName">The name of the resource set. Should be a GLOBAL resource</param>
            <param name="Namespace">The namespace for the generated class. Null or string.Empty to not generate a namespace</param>
            <param name="Classname">Name of the class to be generated</param>
            <param name="FileName">Output filename for the CSharp class. If null no file is generated and only the class is returned</param>
            <returns>string of the generated class</returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedResources.CreateResxDesignerClassFromResourceSet(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a strongly typed resource from a ResourceSet object. The ResourceSet passed should always
            be the invariant resourceset that contains all the ResourceIds.
            
            Creates strongly typed keys for each of the keys/values.
            </summary>
            <param name="resourceSet"></param>
            <param name="Namespace">Namespace of the generated class. Pass Null or string.Empty to not generate a namespace</param>
            <param name="classname">Name of the class to generate. Pass null to use the ResourceSet name</param>
            <param name="fileName">Output filename for the CSharp class. If null no file is generated and only the class is returned</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedResources.CreateResxDesignerClassFromResxFile(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a StronglyTyped class from a REsx file. Can be used after a Resx fi
            </summary>
            <param name="resxFile"></param>
            <param name="resourceSetName"></param>
            <param name="namespaceName"></param>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedResources.CreateClassHeader(System.String,System.String,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Creates the class header for a page
            </summary>
            <param name="Classname"></param>
            <param name="IsVb"></param>
            <param name="sbClass"></param>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedResources.CreateResxDesignerClassHeader(System.String,System.String,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Creates the class header for a page
            </summary>
            <param name="Classname"></param>
            <param name="IsVb"></param>
            <param name="sbClass"></param>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedResources.CreateNameSpaceWrapper(System.String,System.Boolean,System.String)">
            <summary>
            Wraps the body of a class (or multiple classes) into a namespace
            and adds teh appropriate using/imports statements. If no namespace is
            passed the using/imports are still added, but no namespace is assigned
            </summary>
            <param name="Namespace"></param>
            <param name="IsVb"></param>
            <param name="Class"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedResources.CreateResxDesignerNameSpaceWrapper(System.String,System.Boolean,System.String)">
            <summary>
            Wraps the body of a class (or multiple classes) into a namespace
            and adds teh appropriate using/imports statements. If no namespace is
            passed the using/imports are still added, but no namespace is assigned
            </summary>
            <param name="Namespace"></param>
            <param name="IsVb"></param>
            <param name="Class"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.StronglyTypedResources.IsFileVb(System.String)">
            <summary>
            Checks to see if the file extension is .vb and if so 
            returns true
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Globalization.TranslationServices">
            <summary>
            Provides basic translation features via several Web interfaces
            
            NOTE: These services may change their format or otherwise fail.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.TranslationServices.ErrorMessage">
            <summary>
            Error message set when an error occurs in the translation service
            </summary>
        </member>
        <member name="P:Westwind.Globalization.TranslationServices.TimeoutSeconds">
            <summary>
            Timeout for how long to wait for a translation
            </summary>
        </member>
        <member name="M:Westwind.Globalization.TranslationServices.TranslateGoogle(System.String,System.String,System.String,System.String)">
            <summary>
            Translates a string into another language using Google's translate API JSON calls.
            <seealso>Class TranslationServices</seealso>
            </summary>
            <param name="Text">Text to translate. Should be a single word or sentence.</param>
            <param name="FromCulture">
            Two letter culture (en of en-us, fr of fr-ca, de of de-ch)
            </param>
            <param name="ToCulture">
            Two letter culture (as for FromCulture)
            </param>
            <param name="googleApiKey">Google Api key - if not specified it's read from the configuration</param>
        </member>
        <member name="M:Westwind.Globalization.TranslationServices.TranslateGoogleApi(System.String,System.String,System.String,System.String)">
            <summary>
            Translates a string into another language using Google's translate API JSON calls.
            <seealso>Class TranslationServices</seealso>
            </summary>
            <param name="Text">Text to translate. Should be a single word or sentence.</param>
            <param name="FromCulture">
            Two letter culture (en of en-us, fr of fr-ca, de of de-ch)
            </param>
            <param name="ToCulture">
            Two letter culture (as for FromCulture)
            </param>
            <param name="googleApiKey">Google Api key - if not specified it's read from the configuration</param>
        </member>
        <member name="M:Westwind.Globalization.TranslationServices.TranslateBing(System.String,System.String,System.String,System.String)">
            <summary>
            Uses the Bing API service to perform translation
            Bing can translate up to 1000 characters. 
            
            Requires that you provide a CLientId and ClientSecret
            or set the configuration values for these two.
            
            More info on setup:
            http://weblog.west-wind.com/posts/2013/Jun/06/Setting-up-and-using-Bing-Translate-API-Service-for-Machine-Translation
            </summary>
            <param name="text">Text to translate</param>
            <param name="fromCulture">Two letter culture name</param>
            <param name="toCulture">Two letter culture name</param>
            <param name="accessToken">Pass an access token retrieved with GetBingAuthToken.
            If not passed the default keys from .config file are used if any</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.TranslationServices.GetBingAuthToken(System.String,System.String)">
            <summary>
            Retrieves an oAuth authentication token to be used on the translate
            API request. The result string needs to be passed as a bearer token
            to the translate API.
            
            You can find client ID and Secret (or register a new one) at:
            https://datamarket.azure.com/developer/applications/
            </summary>
            <param name="clientId">The client ID of your application</param>
            <param name="clientSecret">The client secret or password</param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Globalization.DbResXConverter">
            <summary>
            This class can be used to export resources from the database to ASP.NET
            compatible resources (Resx). This class takes all the resources in 
            the database and creates RESX files that match these resources.
            
            Please note that it will overrwrite any existing resource files
            if they already exist, so please use this class with care if
            you have existing ResX resources.
            
            Note this class is primarily ASP.NET specific in that it looks at
            ASP.NET specific directory structures for ResX imports and strongly
            typed resource creation.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.#ctor">
            <summary>
            Creates new instance with the default Web Application
            base path set to the current Web application's path.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.#ctor(System.String)">
            <summary>
            Pass in the base phyiscal path for the project. 
            
            For Web Projects this will be the Web root dir for
            non-Web projects this will be the project base path 
            as a string.
            </summary>
            <param name="basePhsyicalPath">
            Optional - allows specifying the virtual path where the resources are loaded and saved to.
            
            If not specified HttpContext.Current.PhysicalPath is used instead.
            </param>
        </member>
        <member name="P:Westwind.Globalization.DbResXConverter.BasePhysicalPath">
            <summary>
            The physical path of the Web application. This path serves as 
            the root path to write resources to.
            
            Example: c:\projects\MyWebApp
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResXConverter.ErrorMessage">
            <summary>
            Error message if an operation fails
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.GenerateLocalWebResourceResXFiles">
            <summary>
            Genereates Local Web Resource ResX files from the DbResourceDataManager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.GenerateGlobalWebResourceResXFiles">
            <summary>
            Genereates Local Web Resource ResX files from the DbResourceDataManager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.GenerateWebResourceResXFiles(System.Boolean)">
            <summary>
            Dumps resources from the DbResourceProvider database
            out to Resx resources in an ASP.NET application
            creating the appropriate APP_LOCAL_RESOURCES/APP_GLOBAL_RESOURCES
            folders and resx files.
            IMPORTANT: will overwrite existing files
            </summary>
            <param name="localResources"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.GenerateResXFiles(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Generates Resx Files for standard non-Web Resource files        
            based on the BasePhysicalPath
            </summary>
            <param name="outputPath">
            Optional output path where resources are generated.
            If not specified the value is inferred for an ASP.NET Web app.
            </param>        
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.FormatWebResourceSetPath(System.String,System.Boolean)">
            <summary>
            Translates the resource set path ASP.NET WebForms Global 
            or local resource path base (ie. without the .resx and localeId extension).
            </summary>
            <param name="ResourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.IsLocalResourceSet(System.String)">
            <summary>
            Determines if a resourceset is a local resource based
            on the extension of the resource set
            </summary>
            <param name="resourceSet"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.FormatResourceSetPath(System.String)">
            <summary>
            Returns the path the resource file withouth the resx and localeId extension
            </summary>
            <param name="resourceSet"></param>
            <param name="LocalResources"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.ImportWebResources(System.String)">
            <summary>
            Imports ResX Web Resources of a Web application by parsing through
            the App_GlobalResources and App_LocalResources directories of 
            a Web site.
            
            Note: Requires that WebPhysicalPath is set to point at the 
            Web root directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.ImportWinResources(System.String)">
            <summary>
            Imports Resources recursively from a non-Web project
            </summary>
            <param name="basePhysicalPath">The physical path to the directory</param>
            <param name="baseNamespace">The base namespace in the project to prefix InternalResourceSets with</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.ImportDirectoryResources(System.String,System.String)">
            <summary>
            Imports all resources from a given directory. This method works for any resources.
            
            When using LocalResources, make sure to provide an app relative path as the second
            parameter if the resources live in non root folder. So if you have resources in off
            an Admin folder use "admin/" as the parameter. Otherwise for web root resources or
            global or assembly level assemblies pass string.Empty or null.   
            </summary>
            <param name="path">Physical Path for the Resources</param>
            <param name="relativePath">Optional - relative path prefix for Web App_LocalResources (ie. admin/)</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.ImportResourceFile(System.String,System.String,System.String)">
            <summary>
            Imports an individual ResX Resource file into the database
            </summary>
            <param name="FileName">Full path to the the ResX file</param>
            <param name="ResourceSetName">Name of the file or for local resources the app relative path plus filename (admin/default.aspx or default.aspx)</param>
            <param name="LocaleId">Locale Id of the file to import. Use "" for Invariant</param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.GetResXResources(System.String)">
            <summary>
            Gets a specific List of resources as a list of ResxItems.
            This list only retrieves items for a specific locale. No
            resource normalization occurs.
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.GetResXResourcesNormalizedForLocale(System.String,System.String)">
            <summary>
            Returns all resources for a given locale normalized down the hierarchy for 
            a given resource file. The resource file should be specified without the
            .resx and locale identifier extensions.
            </summary>
            <param name="baseFile">The base Resource file without .resx and locale extensions</param>
            <param name="LocaleId"></param>
            <returns>Dictionary of resource keys and values</returns>
        </member>
        <member name="M:Westwind.Globalization.DbResXConverter.GetCompiledResourcesNormalizedForLocale(System.String,System.String,System.String)">
            <summary>
            Returns resources for a given resource set in a specific locale        
            </summary>
            <param name="resourceSet"></param>
            <param name="baseNamespace"></param>
            <param name="localeId"></param>
            <returns></returns>
        </member>
        <member name="T:Westwind.Globalization.DbResourceConfiguration">
            <summary>
            The configuration class that is used to configure the Resource Provider.
            This class contains various configuration settings that the provider requires
            to operate both at design time and runtime.
            
            The application uses the static Current property to access the actual
            configuration settings object. By default it reads the configuration settings
            from web.config (at runtime). You can override this behavior by creating your
            own configuration object and assigning it to the DbResourceConfiguration.Current property.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.ActiveConfiguration">
            <summary>
            Name of a LocalizationConfiguration entry that is loaded from the database
            if available. Defaults to null - if set reads these configuration settings
            other than the database connection string from an entry in the 
            LocalizationConfigurations table.
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceConfiguration.Current">
            <summary>
            A global instance of the current configuration. By default this instance reads its
            configuration values from web.config at runtime, but it can be overridden to
            assign specific values or completely replace this object. 
            
            NOTE: Any assignment made to this property should be made at Application_Start
            or other 'application initialization' event so that these settings are applied
            BEFORE the resource provider is used for the first time.
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceConfiguration.ConfigurationMode">
            <summary>
            Determines how configuration information is stored: Config, Json or XML
            Default uses .NET configuration files.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceConfiguration.#cctor">
            <summary>
            Static constructor for the Current property - guarantees this
            code fires exactly once giving us a singleton instance
            of the configuration object.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.ConnectionString">
            <summary>
            Database connection string to the resource data.
            
            The string can either be a full connection string or an entry in the 
            ConnectionStrings section of web.config.
            <seealso>Class DbResource
            Compiling Your Applications with the Provider</seealso>
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.ResourceTableName">
            <summary>
            Database table name used in the database
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.StronglyTypedGlobalResource">
            <summary>
            Path of an optionally generated strongly typed resource
            which is created when exporting to ResX resources.
            
            Leave this value blank if you don't want a strongly typed resource class
            generated for you.
            
            Otherwise format is: 
            ~/App_Code/Resources.cs
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.ResourceBaseNamespace">
            <summary>
            The namespace used for exporting and importing resources 
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.ResxExportProjectType">
            <summary>
            Determines how what type of project we are working with
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.ResxBaseFolder">
            <summary>
            The base physical path used to read and write RESX resources for resource imports
            and exports. This path can either be a virtual path in Web apps or a physical disk
            path. Used only by the Web Admin form. All explicit API imports and exports are
            can pass in the base path explicitly.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.AddMissingResources">
            <summary>
            Determines whether any resources that are not found are automatically
            added to the resource file.
            
            Note only applies to the Invariant culture.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.ResourceAccessMode">
            <summary>
            Default mechanism used to access resources in DbRes.T().           
            This setting is global and used by all resources running through
            the DbResourceManage/Provider.
            
            This doesn't not affect Generated REsources which have their own 
            ResourceAccesssMode override that can be explicitly overridden.    
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.LocalizationFormWebPath">
            <summary>
            Determines the location of the Localization form in a Web relative path.
            This form is popped up when clicking on Edit Resources in the 
            DbResourceControl
            </summary>        
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.BingClientId">
            <summary>
            API key for Bing Translate API in the 
            Administration API.
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.BingClientSecret">
            <summary>
            Bing Secret Key for Bing Translate API Access
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceConfiguration.GoogleApiKey">
            <summary>
            Google Translate API Key used to access Translate API.
            Note this is a for pay API!
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceConfiguration.DbResourceDataManagerType">
            <summary>
            Allows you to override the data provider used to access resources.
            Defaults to Sql Server. To override set this value during application
            startup - typical on DbResourceConfiguration.Current.DbResourceDataManagerType
            
            This type instance is used to instantiate the actual provider.       
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceConfiguration.#ctor">
            <summary>
            Base constructor that doesn't do anything to the default values.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceConfiguration.OnCreateDefaultProvider(System.String,System.Object)">
            <summary>
            Override this method to create the custom default provider. Here we allow for different 
            configuration providers so we don't have to rely on .NET configuration classed (for vNext)
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceConfiguration.CreateDbResourceDataManager">
            <summary>
            Creates an instance of the DbResourceDataManager based on configuration settings
            </summary>
            <returns></returns>
        </member>
        <member name="F:Westwind.Globalization.DbResourceConfiguration.LoadedProviders">
            <summary>
            Keep track of loaded providers so we can unload them
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceConfiguration.ClearResourceCache">
            <summary>
            This static method clears all resources from the loaded Resource Providers 
            and forces them to be reloaded the next time they are requested.
            
            Use this method after you've edited resources in the database and you want 
            to refresh the UI to show the newly changed values.
            
            This method works by internally tracking all the loaded ResourceProvider 
            instances and calling the IwwResourceProvider.ClearResourceCache() method 
            on each of the provider instances. This method is called by the Resource 
            Administration form when you explicitly click the Reload Resources button.
            <seealso>Class DbResourceConfiguration</seealso>
            </summary>
        </member>
        <member name="T:Westwind.Globalization.GlobalizationResxExportProjectTypes">
            <summary>
            Project types for Resx Exports. Either WebForms using 
            local and global resources files, or project
            </summary>
        </member>
        <member name="F:Westwind.Globalization.GlobalizationResxExportProjectTypes.WebForms">
            <summary>
            WebForms project that use App_LocalResource/App_GlobalResources
            to store local and global resources
            </summary>
        </member>
        <member name="F:Westwind.Globalization.GlobalizationResxExportProjectTypes.Project">
            <summary>
            Any .NET project other than WebForms that 
            uses a single directory (Properties) for 
             Resx resources
            </summary>
        </member>
        <member name="T:Westwind.Globalization.DbResourceManager">
            <summary>
            This class provides a databased implementation of a ResourceManager.
            
            A ResourceManager holds each of the InternalResourceSets for a given group
            of resources. In ResX files a group is a file group wiht the same name
            (ie. Resources.resx, Resources.en.resx, Resources.de.resx). In this
            database driven provider the group is determined by the ResourceSet
            and the LocaleId as stored in the database. This class is instantiated
            and gets passed both of these values for identity.
            
            An application can have many ResourceManagers - one for each localized
            page and one for each global resource with each hold multiple resourcesets
            for each of the locale's that are part of that resourceSet.
            
            This class implements only the GetInternalResourceSet method to
            provide the ResourceSet from a database. It also implements all the
            base class constructors and captures only the BaseName which 
            is the name of the ResourceSet (ie. a global or local resource group)
            
            Dependencies:
            DbResourceDataManager for data access
            DbResourceConfiguration which holds and reads config settings
            
            DbResourceSet
            DbResourceReader
            </summary>
        </member>
        <member name="F:Westwind.Globalization.DbResourceManager.SyncLock">
            <summary>
            Critical Section lock used for loading/adding resource sets
            </summary>
        </member>
        <member name="P:Westwind.Globalization.DbResourceManager.AutoAddMissingEntries">
            <summary>
            If true causes any entries that aren't found to be added
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.#ctor(System.String)">
            <summary> 
            Constructs a DbResourceManager object
            </summary>
            <param name="baseName">The qualified base name which the resources represent</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.#ctor(System.Type)">
            <summary>
            Constructs a DbResourceManager object. Match base constructors.
            </summary>
            <param name="resourceType">The Type for which resources should be read/written</param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.Initialize(System.String,System.Reflection.Assembly)">
            <summary>
            Core Configuration method that sets up the ResourceManager. For this 
            implementation we only need the baseName which is the ResourceSet id
            (ie. the local or global resource set name) and the assembly name is
            simply ignored.
            
            This method essentially sets up the ResourceManager and holds all
            of the culture specific resource sets for a single ResourceSet. With
            ResX files each set is a file - in the database a ResourceSet is a group
            with the same ResourceSet Id.
            </summary>
            <param name="ConnectionString"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)">
            <summary>
            This is the only method that needs to be overridden as long as we
            provide implementations for the ResourceSet/ResourceReader/ResourceWriter
            </summary>
            <param name="culture"></param>
            <param name="createIfNotExists"></param>
            <param name="tryParents"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.ReleaseAllResources">
            <summary>
            Clears all resource sets and forces reloading
            on next resource set retrieval. Effectively
            this refreshes resources if the source has
            changed. Required to see DB changes in the
            live UI.
            </summary>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.GetObject(System.String)">
            <summary>
            Core worker method on the manager that returns resource. This
            override returns the resource for the currently active UICulture
            for this manager/resource set.
            
            If resource is not found it returns null
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.GetObject(System.String,System.Globalization.CultureInfo)">
            <summary>
            Core worker method that returns a  resource value for a
            given culture from the this resourcemanager/resourceset.
            
            If resource is not found it returns the null
            </summary>
            <param name="name"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Westwind.Globalization.DbResourceManager.AddMissingResource(System.String,System.String,System.Globalization.CultureInfo)">
            <summary>
            Add a new resource to the base resource set
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
    </members>
</doc>
